#!/usr/bin/env sh

# DEFAULTS
alias cp='cp -ir'
alias df="df -h"
alias du="du -h"
alias fdisk="sudo fdisk"
alias gdisk="sudo gdisk"
alias grep="grep --color --exclude-dir=.git"
alias ls="ls --color --group-directories-first -Ah -I __pycache__"
alias lsblk="lsblk -o name,label,mountpoint,fstype,size"
alias mkdir="mkdir -p"
alias mount="sudo mount"
alias mv="mv -i"
alias pacman="sudo pacman"
alias rm="rm -fr"
alias tree="tree -aCI '__pycache__|.git|*.aux|*.fdb_latexmk|*.fls|*.log|*.nav|*.snm|*.gz|*.toc' --dirsfirst --noreport"
alias umount="sudo umount"

# CLOUD
alias cl="cd ~/cloud"
alias cu="cd ~/cloud/uni"
alias n="\$EDITOR ~/cloud/notes"
alias sn="rclone sync -P ~/cloud cloud:"
alias snn="rclone sync -P cloud: ~/cloud"

# CPM
alias x="cpm"
alias xc="cpm -c"
alias xd="cpm -d"
alias xm="cpm -m"
alias xp="cpm -p"

# DOTFILES
alias al="\$EDITOR \$XDG_CONFIG_HOME/aliases && . \$XDG_CONFIG_HOME/aliases"
alias ba="\$EDITOR ~/.bashrc && . ~/.bashrc"
alias bal="\$EDITOR ~/.config/bashrc_local && . ~/.config/bashrc_local"
alias fd="cd ~/projects/dotfiles"
alias fdf="cd ~/projects/dotfiles && f"
alias fdj="cd ~/projects/dotfiles 1>/dev/null && j"
alias fp="\$EDITOR ~/.profile"
alias fx="\$EDITOR \$XDG_CONFIG_HOME/sx/sxrc"
alias iv="\$EDITOR \$XDG_CONFIG_HOME/nvim/init.vim"
alias tm="\$EDITOR \$XDG_CONFIG_HOME/tmux/tmux.conf"

# FUNCTIONS
ar() { dir="$(basename $1).tar.gz"; [ $# -gt 1 ] && shift; tar -czvf "$dir" "$@"; }
cd() { builtin cd "$@" && ls; }
d() { if [ $# = 0 ]; then exit; else rm "$@"; fi }
f() { if [ -d "$1" ]; then cd "$1" || return; else open "$@"; fi; }
flash() { sudo dd bs=4M if="$1" of="$2" status=progress oflag=sync; }
j() { if [ $# = 0 ]; then dir=$(ffind -type d | fzf); elif [ -d "$1" ]; then cd "$1" && return; else dir=$(ffind -type d | fzf --filter="$*" | head -n1); fi; if [ -n "$dir" ]; then cd "$dir" || return; fi; }
l() { if [ $# = 0 ]; then ls; elif [ -d "$1" ]; then ls "$1"; elif [ -r "$1" ]; then cat "$1"; fi; }
mc() { mkdir "$1" && cd "$1" || return; }
tof() { touch "$1"; "$EDITOR" "$1"; }
tox() { touch "$1"; chmod +x "$1"; }

# G
g_path="$HOME"/cloud/g.sh
[ -r "$g_path" ] && . "$g_path"
alias gg="\$EDITOR \$g_path && . \$g_path"

# GIT
k() { n=24; [ "$1" ] && n=$1; git log --all --graph --decorate --oneline --show-pulls -n"$n"; }
kcl() { git clone "$@" "$(xsel -b | head -n1)"; }
krh() { n=1; [ "$1" ] && n=$1; git reset --hard HEAD~"$n"; }
ksf() { if [ $# = 0 ]; then git show | "$EDITOR"; else git show "$1" | "$EDITOR"; fi }

alias ka="git add"
alias kaa="git add --all"
alias kam="git commit --amend -v"
alias kap="git add -p"
alias kb="git branch -vv"
alias kba="git branch -avv"
alias kbd="git branch -D"
alias kbr="git remote -v | grep -P \(push\) | cut -d ' ' -f 1 | cut -f 2 | xargs -r \$BROWSER"
alias kfp="git format-patch --stdout HEAD^ >"
alias ki="git init"
alias kii="git add --all && git commit -m 'Create repository'"
alias kr="cd \$(git rev-parse --show-toplevel)"
alias krm="git remote -v"
alias kt="git tag"

alias kc="git commit -v"
alias kca="git add --all && git commit -v"
alias kcp="git add --all && git commit -v && git push"
alias kcr="git commit -v -am tmp && git rebase -i HEAD~2"
alias kcrf="git commit -v -am tmp && git rebase -i HEAD~2 && git push -f"

alias kd="git diff"
alias kg="git log --color --oneline --grep"
alias kk="git log --all --graph --decorate --oneline --show-pulls"
alias kkk="git log --graph --decorate --oneline --show-pulls"
alias kl="git log --date=auto:human"
alias klg="git log --grep"
alias ks="git status -bs"
alias kso="git show"
alias kss="nvim +Flog"

alias ko="git checkout"
alias kop="git checkout -p"
alias kob="git checkout -b"
alias kom="git checkout master"

alias kf="git fetch"
alias kfr="git fetch \$(git remote | fzf)"
alias km="git merge"
alias kmm="git merge master"
alias kp="git push"
alias kpf="git push -f"
alias kpl="git pull"

alias kra="git rebase --abort"
alias krc="git rebase --continue"
krb() { n=16; [ "$1" ] && n=$1; git rebase -i HEAD~"$n"; }

alias krr="git reset --hard; git clean -f"
alias krs="git reset --soft"
alias krv="git revert"

alias ksd="git stash drop"
alias ksl="git stash list"
alias ksp="git stash pop"
alias kst="git stash"

# HOME
alias b="cd - >/dev/null && ls"
alias bi="cd \$HOME/.local/bin"
alias c="cd .."
alias ca="cd \$XDG_CACHE_HOME"
alias co="cd \$XDG_CONFIG_HOME"
alias dl="cd ~/Downloads"
alias fl="cd \$XDG_DATA_HOME"

# MISC
alias a="execute"
alias as="echo Remapped to do nothing."
alias bs="bstatus"
alias clean="sudo pacman -Rns \$(pacman -Qttdq); sudo pacman -Sc; rm -r \$XDG_CACHE_HOME/* sudo rm -fr /var/log/journal/*"
alias dus="du -s"
alias e="nvim +'set nospell' /tmp/scratch.md"
alias ff="\$EDITOR"
alias g="grep -Rn"
alias gf="ffind | grep"
alias h="python"
alias i="pkg -i"
alias ig="iwctl station wlan0 get-networks"
alias ir="systemctl restart iwd.service"
alias is="iwctl station wlan0 scan"
alias lb="lsblk"
alias ll="ls -l"
alias lt="lint"
alias m="mv"
alias md="mkdir -p"
alias or="if [ -r README.md ]; then \$EDITOR README.md; else echo No README found.; fi; "
alias p="cp"
alias pa="patch -p1 <"
alias pm="pulsemixer"
alias pw="pwd | sed \"s|\$HOME|~|\""
alias r="pkg -r"
alias re="sudo \$(fc -ln -1)"
alias s="fg"
alias td="tree -d"
alias tf="tree"
alias to="touch"
alias u="sudo reflector -p https -f32 -l16 --score 8 --sort rate --save /etc/pacman.d/mirrorlist && yay"

# OPEN
alias o="autopen"
alias ogi="\$EDITOR .gitignore"
alias ogm="\$EDITOR .gitmodules"

# PROJECTS
alias aa="cd ~/projects/arch"
alias aaf="cd ~/projects/arch && f"
alias ab="cd ~/projects/arch && \$EDITOR base.sh"
alias ad="cd ~/projects/arch && \$EDITOR desktop.sh"
alias dw="cd ~/projects/dwm"
alias dww="cd ~/projects/dwm && f dwm.c"
alias fj="cd ~/projects"
alias ft="cd ~/projects/st"
alias sc="cd ~/projects/scripts"
alias scf="sc && f"
alias si="cd ~/projects/sites"

# TMUX
alias t="tmux new -A"
alias ta="tmux a -t"
alias tk="tmux kill-session -t"
alias tkk="tmux kill-session -a"
alias tl="tmux ls"
alias ts="tmux switch -t"
tt() { echo "$TMUX_PANE" > /tmp/tmuxsend; }

# VIM
vpa() {
    [ $# = 0 ] && url="$(xsel -b | head -n1)" || url="$1"
    name=$(echo "$url" | sed s/.git$// | sed s/.n*vim$// | sed 's/.*\///' | sed s/^vim-//)
    git submodule add --force --name "$name" "$url" "dotfiles/nvim/pack/plugins/opt/$name"
}
vpr() {
    [ $# = 0 ] && echo No submodule provided. && return
    git rm -f "dotfiles/nvim/pack/plugins/opt/$1"
    rm -fr ".git/modules/$1"
}
